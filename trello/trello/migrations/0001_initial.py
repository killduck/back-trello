# Generated by Django 5.0.4 on 2024-07-01 22:38

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите наименование доски', max_length=50, verbose_name='Наименование доски')),
                ('img', models.ImageField(max_length=200, null=True, upload_to='', verbose_name='Картинка доски(фон)')),
            ],
            options={
                'verbose_name': 'Дашборд',
                'verbose_name_plural': 'дашборды',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, help_text='Введите Имя', max_length=50, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, help_text='Введите Фамилию', max_length=50, null=True, verbose_name='Фамилия')),
                ('nick_name', models.CharField(error_messages={'unique': 'Такой Никнейм уже есть'}, help_text='Введите Никнейм', max_length=50, unique=True, verbose_name='Никнейм')),
            ],
            options={
                'verbose_name': 'Участник',
                'verbose_name_plural': 'участники',
                'ordering': ['nick_name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'Пользователь с таким логином уже существует.'}, help_text='Введите логин пользователя', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Не допустимое имя', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Логин')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким e-mail уже существует.'}, help_text='Введите email пользователя', max_length=200, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(help_text='Введите имя пользователя', max_length=200, verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Введите фамилию пользователя', max_length=200, verbose_name='Фамилия')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('id',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите наименование колонки', max_length=50, verbose_name='Наименование колонки')),
                ('order', models.IntegerField(help_text='Номер позиции', null=True, verbose_name='Номер позиции колонки')),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='column', to='trello.dashboard')),
            ],
            options={
                'verbose_name': 'Колонку',
                'verbose_name_plural': 'колонки',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите наименование карточки', max_length=50, verbose_name='Наименование карточки')),
                ('order', models.IntegerField(help_text='Введите номер позиции карточки', verbose_name='Номер позиции карточки')),
                ('column', models.ForeignKey(blank=True, help_text='Введите колонку к которой относится карточка', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cards', to='trello.column', verbose_name='Колонка')),
                ('author', models.ForeignKey(help_text='Введите автора', on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='trello.person', verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Карточку',
                'verbose_name_plural': 'карточки',
                'ordering': ['order'],
            },
        ),
    ]
