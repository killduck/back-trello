# Generated by Django 3.2.25 on 2024-07-18 16:21

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'Пользователь с таким логином уже существует.'}, help_text='Введите логин пользователя', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Не допустимое имя', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Логин')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким e-mail уже существует.'}, help_text='Введите email пользователя', max_length=200, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(help_text='Введите имя пользователя', max_length=200, verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Введите фамилию пользователя', max_length=200, verbose_name='Фамилия')),
                ('is_active', models.BooleanField(default=True, verbose_name='Запись активна')),
                ('is_staff', models.BooleanField(default=False, verbose_name='права Админа')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='права СуперПользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('id',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите наименование карточки', max_length=50, verbose_name='Наименование карточки')),
                ('order', models.IntegerField(help_text='Введите номер позиции карточки', verbose_name='Номер позиции карточки')),
                ('date_start', models.DateField(blank=True, null=True)),
                ('date_end', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Карточку',
                'verbose_name_plural': 'карточки',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Checklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите наименование чек-листа', max_length=50, verbose_name='Наименование чек-листа')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checklist', to='trello.card', verbose_name='Карточка')),
            ],
            options={
                'verbose_name': 'Чеклист',
                'verbose_name_plural': 'чеклисты',
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите наименование доски', max_length=50, verbose_name='Наименование доски')),
                ('img', models.ImageField(max_length=200, null=True, upload_to='', verbose_name='Картинка доски(фон)')),
            ],
            options={
                'verbose_name': 'Дашборд',
                'verbose_name_plural': 'дашборды',
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите наименование цветовой метки', max_length=50, verbose_name='Наименование цветовой метки')),
                ('color_hex', models.CharField(help_text='Введите hex код цвета', max_length=200, verbose_name='Hex цвета')),
            ],
            options={
                'verbose_name': 'Метка',
                'verbose_name_plural': 'метки',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите наименование роли', max_length=50, verbose_name='Наименование роли')),
                ('description', models.CharField(help_text='Введите описание роли', max_length=200, verbose_name='Описание роли')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'роли',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DashboardUserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_user_role', to='trello.dashboard', verbose_name='Дашборд')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_dashboard', to='trello.role', verbose_name='Роль')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_dashboard', to=settings.AUTH_USER_MODEL, verbose_name='Польователь')),
            ],
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите наименование колонки', max_length=50, verbose_name='Наименование колонки')),
                ('order', models.IntegerField(help_text='Номер позиции', null=True, verbose_name='Номер позиции колонки')),
                ('dashboard', models.ForeignKey(help_text='Введите Дашборд к которому относится колонка', on_delete=django.db.models.deletion.CASCADE, related_name='column', to='trello.dashboard', verbose_name='Дашборд')),
            ],
            options={
                'verbose_name': 'Колонку',
                'verbose_name_plural': 'колонки',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Checkstep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Введите текст', verbose_name='Текст чекбокса')),
                ('checkbox', models.BooleanField()),
                ('checklist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkstep', to='trello.checklist', verbose_name='Чек-лист')),
            ],
            options={
                'verbose_name': 'Чекбокс',
                'verbose_name_plural': 'чекбоксы',
            },
        ),
        migrations.CreateModel(
            name='CardUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_user_role', to='trello.card', verbose_name='Карточка')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_card', to=settings.AUTH_USER_MODEL, verbose_name='Польователь')),
            ],
        ),
        migrations.AddField(
            model_name='card',
            name='column',
            field=models.ForeignKey(blank=True, help_text='Введите колонку к которой относится карточка', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cards', to='trello.column', verbose_name='Колонка'),
        ),
        migrations.AddField(
            model_name='card',
            name='label',
            field=models.ForeignKey(blank=True, help_text='Введите цветовую метку', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cards', to='trello.label', verbose_name='Метка'),
        ),
        migrations.AddConstraint(
            model_name='dashboarduserrole',
            constraint=models.UniqueConstraint(fields=('dashboard', 'user'), name='unique_dashboard_user'),
        ),
        migrations.AddConstraint(
            model_name='carduser',
            constraint=models.UniqueConstraint(fields=('card', 'user'), name='unique_card_user'),
        ),
    ]
